/* Generated By:JavaCC: Do not edit this line. ADTParser.java */
/** ID lister. */
import java.util.*;

public class ADTParser implements ADTParserConstants {

  /** Main entry point. */
  public static void main(String args[]) throws ParseException {
                ADTParser parser = new ADTParser(System.in);
                ASpec aspec = parser.Input();
                System.out.println(aspec);
  }

/** Top level production. */
  static final public ASpec Input() throws ParseException {
        ArrayList<ADT> adts;
        ArrayList<Equation> equations;
    jj_consume_token(15);
    adts = ADTs();
    jj_consume_token(16);
    equations = Equations();
        for(ADT a: adts)
        {
                for( Function f : a.getFunctions())
                {
                        for(Equation e : equations)
                        {
                                if(f.getName().equals(e.getInput().getName()))
                                {
                                        f.addEquation(e);
                                }
                        }
                }
        }

        {if (true) return new ASpec(adts);}
    jj_consume_token(0);
    throw new Error("Missing return statement in function");
  }

  static final public ArrayList<ADT> ADTs() throws ParseException {
        ArrayList<ADT> result = new ArrayList<ADT>();
        ADT a;
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 17:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      a = ADT();
                  result.add(a);
    }
          {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  static final public ADT ADT() throws ParseException {
        ArrayList<Function> funcs;
        String name;
    jj_consume_token(17);
    name = TypeName();
    funcs = OperationSpecs();
          {if (true) return new ADT(name, funcs);}
    throw new Error("Missing return statement in function");
  }

  static final public String TypeName() throws ParseException {
        Token s;
    s = jj_consume_token(identifier);
          {if (true) return s.image;}
    throw new Error("Missing return statement in function");
  }

  static final public ArrayList<Function> OperationSpecs() throws ParseException {
        ArrayList<Function> result = new ArrayList<Function>();
        Function func;
    label_2:
    while (true) {
      func = OperationSpec();
                  result.add(func);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case identifier:
        ;
        break;
      default:
        jj_la1[1] = jj_gen;
        break label_2;
      }
    }
          {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  static final public Function OperationSpec() throws ParseException {
        String name;
        Invocation inv;
        String t;
    name = Operation();
    jj_consume_token(18);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case type:
    case identifier:
      inv = ArgTypes();
      break;
    default:
      jj_la1[2] = jj_gen;
                              inv = new Invocation(new ArrayList<String>());
    }
    jj_consume_token(19);
    t = Type();
          {if (true) return new Function(name, inv, t);}
    throw new Error("Missing return statement in function");
  }

  static final public String Type() throws ParseException {
        String s;
        Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case type:
      t = jj_consume_token(type);
                      s = t.image;
      break;
    case identifier:
      s = TypeName();
      break;
    default:
      jj_la1[3] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
          {if (true) return s;}
    throw new Error("Missing return statement in function");
  }

  static final public String Operation() throws ParseException {
        Token s;
    s = jj_consume_token(identifier);
          {if (true) return s.image;}
    throw new Error("Missing return statement in function");
  }

  static final public Invocation ArgTypes() throws ParseException {
        ArrayList<String> types = new ArrayList<String>();
        String s;
    s = Type();
          types.add(s);
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 20:
        ;
        break;
      default:
        jj_la1[4] = jj_gen;
        break label_3;
      }
      jj_consume_token(20);
      s = Type();
                  types.add(s);
    }
          {if (true) return new Invocation(types);}
    throw new Error("Missing return statement in function");
  }

  static final public ArrayList<Equation> Equations() throws ParseException {
        ArrayList<Equation> result = new ArrayList<Equation>();
        Equation eq;
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case identifier:
      case OPENPAR:
        ;
        break;
      default:
        jj_la1[5] = jj_gen;
        break label_4;
      }
      eq = Equation();
                  result.add(eq);
    }
          {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  static final public Equation Equation() throws ParseException {
        IExpression in;
        IExpression out;
    in = Term();
    jj_consume_token(21);
    out = Rhs();
          {if (true) return new Equation((FunctionCall)in, out);}
    throw new Error("Missing return statement in function");
  }

  static final public IExpression Term() throws ParseException {
        String name;
        Token t;
        ArrayList<IExpression> args;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case identifier:
      t = jj_consume_token(identifier);
                            {if (true) return new RangeVariable(t.image);}
      break;
    case OPENPAR:
      jj_consume_token(OPENPAR);
      name = Operation();
      args = Args();
      jj_consume_token(CLOSEPAR);
                         {if (true) return new FunctionCall(name, args);}
      break;
    default:
      jj_la1[6] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public IExpression Rhs() throws ParseException {
        String name;
        Token t;
        ArrayList<IExpression> args;
        String s;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case trueval:
      t = jj_consume_token(trueval);
                                {if (true) return new BooleanValue(true);}
      break;
    case falseval:
      t = jj_consume_token(falseval);
                                 {if (true) return new BooleanValue(false);}
      break;
    case uinteger:
      t = jj_consume_token(uinteger);
                                 {if (true) return new IntValue(t.image);}
      break;
    case identifier:
      t = jj_consume_token(identifier);
                                   {if (true) return new RangeVariable(t.image);}
      break;
    case stringrep:
      t = jj_consume_token(stringrep);
                                  {if (true) return new StringValue(t.image);}
      break;
    case charrep:
      t = jj_consume_token(charrep);
                                {if (true) return new CharValue(t.image.charAt(1));}
      break;
    case PRIMSTART:
      t = jj_consume_token(PRIMSTART);
                         s = t.image.substring(1);
      args = RhsArgs();
      jj_consume_token(CLOSEPAR);
                         {if (true) return new FunctionCall(s, args);}
      break;
    case OPENPAR:
      jj_consume_token(OPENPAR);
      name = Operation();
      args = RhsArgs();
      jj_consume_token(CLOSEPAR);
                         {if (true) return new FunctionCall(name, args);}
      break;
    default:
      jj_la1[7] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public ArrayList<IExpression> Args() throws ParseException {
        ArrayList<IExpression> result = new ArrayList<IExpression>();
        IExpression t;
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case identifier:
      case OPENPAR:
        ;
        break;
      default:
        jj_la1[8] = jj_gen;
        break label_5;
      }
      t = Term();
                  result.add(t);
    }
          {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  static final public ArrayList<IExpression> RhsArgs() throws ParseException {
        ArrayList<IExpression> result = new ArrayList<IExpression>();
        IExpression r;
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case trueval:
      case falseval:
      case uinteger:
      case identifier:
      case OPENPAR:
      case PRIMSTART:
      case stringrep:
      case charrep:
        ;
        break;
      default:
        jj_la1[9] = jj_gen;
        break label_6;
      }
      r = Rhs();
                  result.add(r);
    }
          {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public ADTParserTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[10];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x20000,0x200,0x220,0x220,0x100000,0x600,0x600,0x77c0,0x600,0x77c0,};
   }

  /** Constructor with InputStream. */
  public ADTParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public ADTParser(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new ADTParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 10; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 10; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public ADTParser(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new ADTParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 10; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 10; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public ADTParser(ADTParserTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 10; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(ADTParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 10; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[22];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 10; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 22; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}

interface IExpression
{
        String getName();
}

class ASpec
{
        private ArrayList<ADT> adts;

        public ASpec()
        {
                adts = new ArrayList<ADT>();
        }

        public ASpec(ArrayList<ADT> a)
        {
                adts = a;
        }

        public ArrayList<ADT> getADT()
        {
                return adts;
        }

        public String toString()
        {
                StringBuffer sb = new StringBuffer();
                for (ADT a : adts)
                {
                        sb.append(a.name);
                }
                return sb.toString();
        }
}

class ADT
{
        private ArrayList<Function> functions;
        public String name;

        public ADT(String n, ArrayList<Function> funcs)
        {
                name = n;
                functions = funcs;
        }

        public ArrayList<Function> getFunctions()
        {
                return functions;
        }
}

class Equation
{
        public FunctionCall input;
        public IExpression output;

        public Equation(FunctionCall in, IExpression out)
        {
                this.input = in;
                this.output = out;
        }

        public FunctionCall getInput()
        {
                return input;
        }

        public IExpression getOuput()
        {
                return output;
        }
}

class FunctionCall implements IExpression
{
        public String funcName;
        public ArrayList<IExpression> inputs;

        public FunctionCall(String fName, ArrayList<IExpression> in)
        {
                this.funcName = fName;
                this.inputs = in;
        }

        public String getName()
        {
                return funcName;
        }
}

class RangeVariable implements IExpression
{
        public String name;

        public RangeVariable(String n)
        {
                this.name = n;
        }

        public String getName()
        {
                return name;
        }
}

class BooleanValue implements IExpression
{
        public boolean val;

        public BooleanValue(boolean b)
        {
                this.val = b;
        }

        public String getName()
        {
                if(val)
                {
                        return "true";
                }
                else return "false";
        }
}

class StringValue implements IExpression
{
        public String val;

        public StringValue(String s)
        {
                this.val = s;
        }

        public String getName()
        {
                return val;
        }
}

class CharValue implements IExpression
{
        public char val;

        public CharValue(char c)
        {
                this.val = c;
        }

        public String getName()
        {
                return val + "";
        }
}

class IntValue implements IExpression
{
        public int val;

        public IntValue(String i)
        {
                this.val = Integer.parseInt(i);
        }

        public String getName()
        {
                return val + "";
        }
}

class Function
{
        private String name;
        private Invocation invocation;
        private String type;
        private ArrayList<Equation> equations;

        public Function(String name, Invocation inv, String type)
        {
                this.name = name;
                this.type = type;
                this.invocation = inv;
                this.equations = new ArrayList<Equation>();
        }

        public String getName()
        {
                return name;
        }

        public String getType()
        {
                return type;
        }

        public Invocation getInvocations()
        {
                return invocation;
        }

        public ArrayList<Equation> getEquations()
        {
                return equations;
        }

        public void addEquation(Equation e)
        {
                this.equations.add(e);
        }
}

class Invocation
{
        private List<String> parameterTypes;

        public Invocation(ArrayList<String> types)
        {
                parameterTypes = types;
        }

        public List<String> getParameterTypes()
        {
                return parameterTypes;
        }
}
